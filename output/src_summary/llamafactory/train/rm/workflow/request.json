{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "请概括下面这个脚本的核心功能，然后该功能是否和大语言模型的指令精调任务有关```python\nfrom typing import TYPE_CHECKING, List, Optional\n\nfrom ...data import PairwiseDataCollatorWithPadding, get_dataset, split_dataset\nfrom ...extras.ploting import plot_loss\nfrom ...model import load_model, load_tokenizer\nfrom ..callbacks import fix_valuehead_checkpoint\nfrom ..trainer_utils import create_modelcard_and_push\nfrom .metric import compute_accuracy\nfrom .trainer import PairwiseTrainer\n\n\nif TYPE_CHECKING:\n    from transformers import Seq2SeqTrainingArguments, TrainerCallback\n\n    from ...hparams import DataArguments, FinetuningArguments, ModelArguments\n\n\ndef run_rm(\n    model_args: \"ModelArguments\",\n    data_args: \"DataArguments\",\n    training_args: \"Seq2SeqTrainingArguments\",\n    finetuning_args: \"FinetuningArguments\",\n    callbacks: Optional[List[\"TrainerCallback\"]] = None,\n):\n    tokenizer_module = load_tokenizer(model_args)\n    tokenizer = tokenizer_module[\"tokenizer\"]\n    dataset = get_dataset(model_args, data_args, training_args, stage=\"rm\", **tokenizer_module)\n    model = load_model(tokenizer, model_args, finetuning_args, training_args.do_train, add_valuehead=True)\n    data_collator = PairwiseDataCollatorWithPadding(tokenizer, pad_to_multiple_of=8)\n\n    \n    training_args.remove_unused_columns = False  \n\n    \n    trainer = PairwiseTrainer(\n        model=model,\n        args=training_args,\n        finetuning_args=finetuning_args,\n        data_collator=data_collator,\n        callbacks=callbacks,\n        compute_metrics=compute_accuracy,\n        **tokenizer_module,\n        **split_dataset(dataset, data_args, training_args),\n    )\n\n    \n    if training_args.do_train:\n        train_result = trainer.train(resume_from_checkpoint=training_args.resume_from_checkpoint)\n        trainer.save_model()\n        if training_args.should_save:\n            fix_valuehead_checkpoint(model, training_args.output_dir, training_args.save_safetensors)\n\n        trainer.log_metrics(\"train\", train_result.metrics)\n        trainer.save_metrics(\"train\", train_result.metrics)\n        trainer.save_state()\n        if trainer.is_world_process_zero() and finetuning_args.plot_loss:\n            plot_loss(training_args.output_dir, keys=[\"loss\", \"eval_loss\", \"eval_accuracy\"])\n\n    \n    if training_args.do_eval:\n        metrics = trainer.evaluate(metric_key_prefix=\"eval\")\n        trainer.log_metrics(\"eval\", metrics)\n        trainer.save_metrics(\"eval\", metrics)\n\n    \n    if training_args.do_predict:\n        predict_results = trainer.predict(dataset, metric_key_prefix=\"predict\")\n        trainer.log_metrics(\"predict\", predict_results.metrics)\n        trainer.save_metrics(\"predict\", predict_results.metrics)\n        trainer.save_predictions(predict_results)\n\n    \n    create_modelcard_and_push(trainer, model_args, data_args, training_args, finetuning_args)\n```"
        }
    ],
    "temperature": 0
}