{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "请概括下面这个脚本的核心功能，然后该功能是否和大语言模型的指令精调任务有关```python\nfrom typing import TYPE_CHECKING, List, Optional\n\nfrom transformers import DataCollatorWithPadding\n\nfrom ...data import get_dataset\nfrom ...extras.ploting import plot_loss\nfrom ...model import load_model, load_tokenizer\nfrom ..callbacks import fix_valuehead_checkpoint\nfrom ..trainer_utils import create_ref_model, create_reward_model\nfrom .trainer import CustomPPOTrainer\n\n\nif TYPE_CHECKING:\n    from transformers import Seq2SeqTrainingArguments, TrainerCallback\n\n    from ...hparams import DataArguments, FinetuningArguments, GeneratingArguments, ModelArguments\n\n\ndef run_ppo(\n    model_args: \"ModelArguments\",\n    data_args: \"DataArguments\",\n    training_args: \"Seq2SeqTrainingArguments\",\n    finetuning_args: \"FinetuningArguments\",\n    generating_args: \"GeneratingArguments\",\n    callbacks: Optional[List[\"TrainerCallback\"]] = None,\n):\n    tokenizer_module = load_tokenizer(model_args)\n    tokenizer = tokenizer_module[\"tokenizer\"]\n    dataset = get_dataset(model_args, data_args, training_args, stage=\"ppo\", **tokenizer_module)\n    model = load_model(tokenizer, model_args, finetuning_args, training_args.do_train, add_valuehead=True)\n\n    tokenizer.padding_side = \"left\"  \n    data_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n\n    \n    ref_model = create_ref_model(model_args, finetuning_args, add_valuehead=True)\n    reward_model = create_reward_model(model, model_args, finetuning_args)\n\n    \n    ppo_trainer: \"CustomPPOTrainer\" = CustomPPOTrainer(\n        model_args=model_args,\n        training_args=training_args,\n        finetuning_args=finetuning_args,\n        generating_args=generating_args,\n        callbacks=callbacks,\n        model=model,\n        reward_model=reward_model,\n        ref_model=ref_model,\n        dataset=dataset,\n        data_collator=data_collator,\n        **tokenizer_module,\n    )\n\n    \n    if training_args.do_train:\n        ppo_trainer.ppo_train(resume_from_checkpoint=training_args.resume_from_checkpoint)\n        ppo_trainer.save_model()\n        if training_args.should_save:\n            fix_valuehead_checkpoint(model, training_args.output_dir, training_args.save_safetensors)\n\n        ppo_trainer.save_state()  \n        if ppo_trainer.is_world_process_zero() and finetuning_args.plot_loss:\n            plot_loss(training_args.output_dir, keys=[\"loss\", \"reward\"])\n```"
        }
    ],
    "temperature": 0
}