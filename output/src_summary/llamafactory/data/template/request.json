{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "请概括下面这个脚本的核心功能，然后该功能是否和大语言模型的指令精调任务有关```python\nfrom dataclasses import dataclass\nfrom typing import TYPE_CHECKING, Dict, List, Optional, Sequence, Tuple, Union\n\nfrom ..extras.logging import get_logger\nfrom .data_utils import Role\nfrom .formatter import EmptyFormatter, FunctionFormatter, StringFormatter, ToolFormatter\n\n\nif TYPE_CHECKING:\n    from transformers import PreTrainedTokenizer\n\n    from .formatter import SLOTS, Formatter\n\n\nlogger = get_logger(__name__)\n\n\n@dataclass\nclass Template:\n    format_user: \"Formatter\"\n    format_assistant: \"Formatter\"\n    format_system: \"Formatter\"\n    format_function: \"Formatter\"\n    format_observation: \"Formatter\"\n    format_tools: \"Formatter\"\n    format_separator: \"Formatter\"\n    format_prefix: \"Formatter\"\n    default_system: str\n    stop_words: List[str]\n    image_token: str\n    efficient_eos: bool\n    replace_eos: bool\n\n    def encode_oneturn(\n        self,\n        tokenizer: \"PreTrainedTokenizer\",\n        messages: Sequence[Dict[str, str]],\n        system: Optional[str] = None,\n        tools: Optional[str] = None,\n    ) -> Tuple[List[int], List[int]]:\n        r\n        encoded_messages = self._encode(tokenizer, messages, system, tools)\n        prompt_ids = []\n        for encoded_ids in encoded_messages[:-1]:\n            prompt_ids += encoded_ids\n\n        answer_ids = encoded_messages[-1]\n        return prompt_ids, answer_ids\n\n    def encode_multiturn(\n        self,\n        tokenizer: \"PreTrainedTokenizer\",\n        messages: Sequence[Dict[str, str]],\n        system: Optional[str] = None,\n        tools: Optional[str] = None,\n    ) -> List[Tuple[List[int], List[int]]]:\n        r\n        encoded_messages = self._encode(tokenizer, messages, system, tools)\n        return [(encoded_messages[i], encoded_messages[i + 1]) for i in range(0, len(encoded_messages), 2)]\n\n    def extract_tool(self, content: str) -> Union[str, List[Tuple[str, str]]]:\n        r\n        return self.format_tools.extract(content)\n\n    def _encode(\n        self,\n        tokenizer: \"PreTrainedTokenizer\",\n        messages: Sequence[Dict[str, str]],\n        system: Optional[str],\n        tools: Optional[str],\n    ) -> List[List[int]]:\n        r\n        system = system or self.default_system\n        encoded_messages = []\n        for i, message in enumerate(messages):\n            elements = []\n\n            if i == 0:\n                elements += self.format_prefix.apply()\n                if system or tools:\n                    tool_text = self.format_tools.apply(content=tools)[0] if tools else \"\"\n                    elements += self.format_system.apply(content=(system + tool_text))\n\n            if i > 0 and i % 2 == 0:\n                elements += self.format_separator.apply()\n\n            if message[\"role\"] == Role.USER.value:\n                elements += self.format_user.apply(content=message[\"content\"], idx=str(i // 2))\n            elif message[\"role\"] == Role.ASSISTANT.value:\n                elements += self.format_assistant.apply(content=message[\"content\"])\n            elif message[\"role\"] == Role.OBSERVATION.value:\n                elements += self.format_observation.apply(content=message[\"content\"])\n            elif message[\"role\"] == Role.FUNCTION.value:\n                elements += self.format_function.apply(content=message[\"content\"])\n            else:\n                raise NotImplementedError(\"Unexpected role: {}\".format(message[\"role\"]))\n\n            encoded_messages.append(self._convert_elements_to_ids(tokenizer, elements))\n\n        return encoded_messages\n\n    def _convert_elements_to_ids(self, tokenizer: \"PreTrainedTokenizer\", elements: \"SLOTS\") -> List[int]:\n        r\n        token_ids = []\n        for elem in elements:\n            if isinstance(elem, str):\n                if len(elem) != 0:\n                    token_ids += tokenizer.encode(elem, add_special_tokens=False)\n            elif isinstance(elem, dict):\n                token_ids += [tokenizer.convert_tokens_to_ids(elem.get(\"token\"))]\n            elif isinstance(elem, set):\n                if \"bos_token\" in elem and tokenizer.bos_token_id is not None:\n                    token_ids += [tokenizer.bos_token_id]\n                elif \"eos_token\" in elem and tokenizer.eos_token_id is not None:\n                    token_ids += [tokenizer.eos_token_id]\n            else:\n                raise ValueError(\"Input must be string, set[str] or dict[str, str], got {}\".format(type(elem)))\n\n        return token_ids\n\n\n@dataclass\nclass Llama2Template(Template):\n    def _encode(\n        self,\n        tokenizer: \"PreTrainedTokenizer\",\n        messages: Sequence[Dict[str, str]],\n        system: str,\n        tools: str,\n    ) -> List[List[int]]:\n        r\n        system = system or self.default_system\n        encoded_messages = []\n        for i, message in enumerate(messages):\n            elements = []\n\n            system_text = \"\"\n            if i == 0:\n                elements += self.format_prefix.apply()\n                if system or tools:\n                    tool_text = self.format_tools.apply(content=tools)[0] if tools else \"\"\n                    system_text = self.format_system.apply(content=(system + tool_text))[0]\n\n            if i > 0 and i % 2 == 0:\n                elements += self.format_separator.apply()\n\n            if message[\"role\"] == Role.USER.value:\n                elements += self.format_user.apply(content=system_text + message[\"content\"])\n            elif message[\"role\"] == Role.ASSISTANT.value:\n                elements += self.format_assistant.apply(content=message[\"content\"])\n            elif message[\"role\"] == Role.OBSERVATION.value:\n                elements += self.format_observation.apply(content=message[\"content\"])\n            elif message[\"role\"] == Role.FUNCTION.value:\n                elements += self.format_function.apply(content=message[\"content\"])\n            else:\n                raise NotImplementedError(\"Unexpected role: {}\".format(message[\"role\"]))\n\n            encoded_messages.append(self._convert_elements_to_ids(tokenizer, elements))\n\n        return encoded_messages\n\n\nTEMPLATES: Dict[str, Template] = {}\n\n\ndef _register_template(\n    name: str,\n    format_user: Optional[\"Formatter\"] = None,\n    format_assistant: Optional[\"Formatter\"] = None,\n    format_system: Optional[\"Formatter\"] = None,\n    format_function: Optional[\"Formatter\"] = None,\n    format_observation: Optional[\"Formatter\"] = None,\n    format_tools: Optional[\"Formatter\"] = None,\n    format_separator: Optional[\"Formatter\"] = None,\n    format_prefix: Optional[\"Formatter\"] = None,\n    default_system: str = \"\",\n    stop_words: Sequence[str] = [],\n    image_token: str = \"<image>\",\n    efficient_eos: bool = False,\n    replace_eos: bool = False,\n) -> None:\n    r\n    eos_slots = [] if efficient_eos else [{\"eos_token\"}]\n    template_class = Llama2Template if name.startswith(\"llama2\") else Template\n    default_user_formatter = StringFormatter(slots=[\"{{content}}\"])\n    default_assistant_formatter = StringFormatter(slots=[\"{{content}}\"] + eos_slots)\n    default_function_formatter = FunctionFormatter(slots=eos_slots, tool_format=\"default\")\n    default_tool_formatter = ToolFormatter(tool_format=\"default\")\n    default_separator_formatter = EmptyFormatter()\n    default_prefix_formatter = EmptyFormatter()\n    TEMPLATES[name] = template_class(\n        format_user=format_user or default_user_formatter,\n        format_assistant=format_assistant or default_assistant_formatter,\n        format_system=format_system or default_user_formatter,\n        format_function=format_function or default_function_formatter,\n        format_observation=format_observation or format_user or default_user_formatter,\n        format_tools=format_tools or default_tool_formatter,\n        format_separator=format_separator or default_separator_formatter,\n        format_prefix=format_prefix or default_prefix_formatter,\n        default_system=default_system,\n        stop_words=stop_words,\n        image_token=image_token,\n        efficient_eos=efficient_eos,\n        replace_eos=replace_eos,\n    )\n\n\ndef _add_or_replace_eos_token(tokenizer: \"PreTrainedTokenizer\", eos_token: str) -> None:\n    is_added = tokenizer.eos_token_id is None\n    num_added_tokens = tokenizer.add_special_tokens({\"eos_token\": eos_token})\n\n    if is_added:\n        logger.info(\"Add eos token: {}\".format(tokenizer.eos_token))\n    else:\n        logger.info(\"Replace eos token: {}\".format(tokenizer.eos_token))\n\n    if num_added_tokens > 0:\n        logger.warning(\"New tokens have been added, make sure `resize_vocab` is True.\")\n\n\ndef _jinja_escape(content: str) -> str:\n    return content.replace(\"'\", r\"\\'\")\n\n\ndef _convert_slots_to_jinja(slots: \"SLOTS\", tokenizer: \"PreTrainedTokenizer\", placeholder: str = \"content\") -> str:\n    slot_items = []\n    for slot in slots:\n        if isinstance(slot, str):\n            slot_pieces = slot.split(\"{{content}}\")\n            if slot_pieces[0]:\n                slot_items.append(\"'\" + _jinja_escape(slot_pieces[0]) + \"'\")\n            if len(slot_pieces) > 1:\n                slot_items.append(placeholder)\n                if slot_pieces[1]:\n                    slot_items.append(\"'\" + _jinja_escape(slot_pieces[1]) + \"'\")\n        elif isinstance(slot, set):  \n            if \"bos_token\" in slot and tokenizer.bos_token_id is not None:\n                slot_items.append(\"'\" + tokenizer.bos_token + \"'\")\n            elif \"eos_token\" in slot and tokenizer.eos_token_id is not None:\n                slot_items.append(\"'\" + tokenizer.eos_token + \"'\")\n        elif isinstance(slot, dict):\n            raise ValueError(\"Dict is not supported.\")\n\n    return \" + \".join(slot_items)\n\n\ndef _get_jinja_template(template: \"Template\", tokenizer: \"PreTrainedTokenizer\") -> str:\n    jinja_template = \"\"\n\n    prefix = _convert_slots_to_jinja(template.format_prefix.apply(), tokenizer)\n    if prefix:\n        jinja_template += \"{{ \" + prefix + \" }}\"\n\n    if template.default_system:\n        jinja_template += \"{% set system_message = '\" + _jinja_escape(template.default_system) + \"' %}\"\n\n    jinja_template += (\n        \"{% if messages[0]['role'] == 'system' %}{% set system_message = messages[0]['content'] %}{% endif %}\"\n    )\n\n    system_message = _convert_slots_to_jinja(template.format_system.apply(), tokenizer, placeholder=\"system_message\")\n    if not isinstance(template, Llama2Template):\n        jinja_template += \"{% if system_message is defined %}{{ \" + system_message + \" }}{% endif %}\"\n\n    jinja_template += \"{% for message in messages %}\"\n    jinja_template += \"{% set content = message['content'] %}\"\n    if isinstance(template, Llama2Template):\n        jinja_template += \"{% if loop.index0 == 0 and system_message is defined %}\"\n        jinja_template += \"{% set content = \" + system_message + \" + message['content'] %}\"\n        jinja_template += \"{% endif %}\"\n\n    jinja_template += \"{% if message['role'] == 'user' %}\"\n    user_message = _convert_slots_to_jinja(template.format_user.apply(), tokenizer)\n    jinja_template += \"{{ \" + user_message + \" }}\"\n\n    jinja_template += \"{% elif message['role'] == 'assistant' %}\"\n    assistant_message = _convert_slots_to_jinja(\n        template.format_assistant.apply() + template.format_separator.apply(), tokenizer\n    )\n    jinja_template += \"{{ \" + assistant_message + \" }}\"\n    jinja_template += \"{% endif %}\"\n    jinja_template += \"{% endfor %}\"\n    return jinja_template\n\n\ndef get_template_and_fix_tokenizer(\n    tokenizer: \"PreTrainedTokenizer\",\n    name: Optional[str] = None,\n    tool_format: Optional[str] = None,\n) -> Template:\n    if name is None:\n        template = TEMPLATES[\"empty\"]  \n    else:\n        template = TEMPLATES.get(name, None)\n        if template is None:\n            raise ValueError(\"Template {} does not exist.\".format(name))\n\n    if tool_format is not None:\n        logger.info(\"Using tool format: {}.\".format(tool_format))\n        eos_slots = [] if template.efficient_eos else [{\"eos_token\"}]\n        template.format_tools = ToolFormatter(tool_format=tool_format)\n        template.format_function = FunctionFormatter(slots=eos_slots, tool_format=tool_format)\n\n    stop_words = template.stop_words\n    if template.replace_eos:\n        if not stop_words:\n            raise ValueError(\"Stop words are required to replace the EOS token.\")\n\n        _add_or_replace_eos_token(tokenizer, eos_token=stop_words[0])\n        stop_words = stop_words[1:]\n\n    if tokenizer.eos_token_id is None:\n        _add_or_replace_eos_token(tokenizer, eos_token=\"<|endoftext|>\")\n\n    if tokenizer.pad_token_id is None:\n        tokenizer.pad_token = tokenizer.eos_token\n        logger.info(\"Add pad token: {}\".format(tokenizer.pad_token))\n\n    if stop_words:\n        num_added_tokens = tokenizer.add_special_tokens(\n            dict(additional_special_tokens=stop_words), replace_additional_special_tokens=False\n        )\n        logger.info(\"Add {} to stop words.\".format(\",\".join(stop_words)))\n        if num_added_tokens > 0:\n            logger.warning(\"New tokens have been added, make sure `resize_vocab` is True.\")\n\n    try:\n        tokenizer.chat_template = _get_jinja_template(template, tokenizer)\n    except ValueError:\n        logger.info(\"Cannot add this chat template to tokenizer.\")\n\n    return template\n\n\n_register_template(\n    name=\"alpaca\",\n    format_user=StringFormatter(slots=[\"\n    format_separator=EmptyFormatter(slots=[\"\\n\\n\"]),\n    default_system=(\n        \"Below is an instruction that describes a task. \"\n        \"Write a response that appropriately completes the request.\\n\\n\"\n    ),\n)\n\n\n_register_template(\n    name=\"aquila\",\n    format_user=StringFormatter(slots=[\"Human: {{content}}\n    format_separator=EmptyFormatter(slots=[\"\n    default_system=(\n        \"A chat between a curious human and an artificial intelligence assistant. \"\n        \"The assistant gives helpful, detailed, and polite answers to the human's questions.\"\n    ),\n    stop_words=[\"</s>\"],\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"atom\",\n    format_user=StringFormatter(\n        slots=[{\"bos_token\"}, \"Human: {{content}}\\n\", {\"eos_token\"}, {\"bos_token\"}, \"Assistant:\"]\n    ),\n    format_assistant=StringFormatter(slots=[\"{{content}}\\n\", {\"eos_token\"}]),\n)\n\n\n_register_template(\n    name=\"baichuan\",\n    format_user=StringFormatter(slots=[{\"token\": \"<reserved_102>\"}, \"{{content}}\", {\"token\": \"<reserved_103>\"}]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"baichuan2\",\n    format_user=StringFormatter(slots=[\"<reserved_106>{{content}}<reserved_107>\"]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"belle\",\n    format_user=StringFormatter(slots=[\"Human: {{content}}\\n\\nBelle: \"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"bluelm\",\n    format_user=StringFormatter(slots=[{\"token\": \"[|Human|]:\"}, \"{{content}}\", {\"token\": \"[|AI|]:\"}]),\n)\n\n\n_register_template(\n    name=\"breeze\",\n    format_user=StringFormatter(slots=[\"[INST] {{content}} [/INST] \"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"chatglm2\",\n    format_user=StringFormatter(slots=[\"[Round {{idx}}]\\n\\n问：{{content}}\\n\\n答：\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"token\": \"[gMASK]\"}, {\"token\": \"sop\"}]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"chatglm3\",\n    format_user=StringFormatter(slots=[{\"token\": \"<|user|>\"}, \"\\n\", \"{{content}}\", {\"token\": \"<|assistant|>\"}]),\n    format_assistant=StringFormatter(slots=[\"\\n\", \"{{content}}\"]),\n    format_system=StringFormatter(slots=[{\"token\": \"<|system|>\"}, \"\\n\", \"{{content}}\"]),\n    format_function=FunctionFormatter(slots=[], tool_format=\"glm4\"),\n    format_observation=StringFormatter(\n        slots=[{\"token\": \"<|observation|>\"}, \"\\n\", \"{{content}}\", {\"token\": \"<|assistant|>\"}]\n    ),\n    format_tools=ToolFormatter(tool_format=\"glm4\"),\n    format_prefix=EmptyFormatter(slots=[{\"token\": \"[gMASK]\"}, {\"token\": \"sop\"}]),\n    stop_words=[\"<|user|>\", \"<|observation|>\"],\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"chatml\",\n    format_user=StringFormatter(slots=[\"<|im_start|>user\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_system=StringFormatter(slots=[\"<|im_start|>system\\n{{content}}<|im_end|>\\n\"]),\n    format_observation=StringFormatter(slots=[\"<|im_start|>tool\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    stop_words=[\"<|im_end|>\", \"<|im_start|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"chatml_de\",\n    format_user=StringFormatter(slots=[\"<|im_start|>user\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_system=StringFormatter(slots=[\"<|im_start|>system\\n{{content}}<|im_end|>\\n\"]),\n    format_observation=StringFormatter(slots=[\"<|im_start|>tool\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    default_system=\"Du bist ein freundlicher und hilfsbereiter KI-Assistent.\",\n    stop_words=[\"<|im_end|>\", \"<|im_start|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"codegeex2\",\n    format_prefix=EmptyFormatter(slots=[{\"token\": \"[gMASK]\"}, {\"token\": \"sop\"}]),\n)\n\n\n_register_template(\n    name=\"codegeex4\",\n    format_user=StringFormatter(slots=[\"<|user|>\\n{{content}}<|assistant|>\\n\"]),\n    format_system=StringFormatter(slots=[\"<|system|>\\n{{content}}\"]),\n    format_function=FunctionFormatter(slots=[], tool_format=\"glm4\"),\n    format_observation=StringFormatter(slots=[\"<|observation|>\\n{{content}}<|assistant|>\\n\"]),\n    format_tools=ToolFormatter(tool_format=\"glm4\"),\n    format_prefix=EmptyFormatter(slots=[\"[gMASK]<sop>\"]),\n    default_system=(\n        \"你是一位智能编程助手，你叫CodeGeeX。你会为用户回答关于编程、代码、计算机方面的任何问题，\"\n        \"并提供格式规范、可以执行、准确安全的代码，并在必要时提供详细的解释。\"\n    ),\n    stop_words=[\"<|user|>\", \"<|observation|>\"],\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"cohere\",\n    format_user=StringFormatter(\n        slots=[\n            (\n                \"<|START_OF_TURN_TOKEN|><|USER_TOKEN|>{{content}}<|END_OF_TURN_TOKEN|>\"\n                \"<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>\"\n            )\n        ]\n    ),\n    format_system=StringFormatter(slots=[\"<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>{{content}}<|END_OF_TURN_TOKEN|>\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"cpm\",\n    format_user=StringFormatter(slots=[\"<用户>{{content}}<AI>\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"dbrx\",\n    format_user=StringFormatter(slots=[\"<|im_start|>user\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_system=StringFormatter(slots=[\"<|im_start|>system\\n{{content}}<|im_end|>\\n\"]),\n    format_observation=StringFormatter(slots=[\"<|im_start|>tool\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    default_system=(\n        \"You are DBRX, created by Databricks. You were last updated in December 2023. \"\n        \"You answer questions based on information available up to that point.\\n\"\n        \"YOU PROVIDE SHORT RESPONSES TO SHORT QUESTIONS OR STATEMENTS, but provide thorough \"\n        \"responses to more complex and open-ended questions.\\nYou assist with various tasks, \"\n        \"from writing to coding (using markdown for code blocks — remember to use ``` with \"\n        \"code, JSON, and tables).\\n(You do not have real-time data access or code execution \"\n        \"capabilities. You avoid stereotyping and provide balanced perspectives on \"\n        \"controversial topics. You do not provide song lyrics, poems, or news articles and \"\n        \"do not divulge details of your training data.)\\nThis is your system prompt, \"\n        \"guiding your responses. Do not reference it, just respond to the user. If you find \"\n        \"yourself talking about this message, stop. You should be responding appropriately \"\n        \"and usually that means not mentioning this.\\nYOU DO NOT MENTION ANY OF THIS INFORMATION \"\n        \"ABOUT YOURSELF UNLESS THE INFORMATION IS DIRECTLY PERTINENT TO THE USER'S QUERY.\"\n    ),\n    stop_words=[\"<|im_end|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"deepseek\",\n    format_user=StringFormatter(slots=[\"User: {{content}}\\n\\nAssistant:\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"deepseekcoder\",\n    format_user=StringFormatter(slots=[\"\n    format_assistant=StringFormatter(slots=[\"\\n{{content}}\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    default_system=(\n        \"You are an AI programming assistant, utilizing the Deepseek Coder model, \"\n        \"developed by Deepseek Company, and you only answer questions related to computer science. \"\n        \"For politically sensitive questions, security and privacy issues, \"\n        \"and other non-computer science questions, you will refuse to answer\\n\"\n    ),\n)\n\n\n_register_template(\n    name=\"default\",\n    format_user=StringFormatter(slots=[\"Human: {{content}}\\nAssistant:\"]),\n    format_system=StringFormatter(slots=[\"{{content}}\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n)\n\n\n_register_template(\n    name=\"empty\",\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"falcon\",\n    format_user=StringFormatter(slots=[\"User: {{content}}\\nFalcon:\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"fewshot\",\n    format_separator=EmptyFormatter(slots=[\"\\n\\n\"]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"gemma\",\n    format_user=StringFormatter(slots=[\"<start_of_turn>user\\n{{content}}<end_of_turn>\\n<start_of_turn>model\\n\"]),\n    format_observation=StringFormatter(\n        slots=[\"<start_of_turn>tool\\n{{content}}<end_of_turn>\\n<start_of_turn>model\\n\"]\n    ),\n    format_separator=EmptyFormatter(slots=[\"<end_of_turn>\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"glm4\",\n    format_user=StringFormatter(slots=[\"<|user|>\\n{{content}}<|assistant|>\"]),\n    format_assistant=StringFormatter(slots=[\"\\n{{content}}\"]),\n    format_system=StringFormatter(slots=[\"<|system|>\\n{{content}}\"]),\n    format_function=FunctionFormatter(slots=[], tool_format=\"glm4\"),\n    format_observation=StringFormatter(slots=[\"<|observation|>\\n{{content}}<|assistant|>\"]),\n    format_tools=ToolFormatter(tool_format=\"glm4\"),\n    format_prefix=EmptyFormatter(slots=[\"[gMASK]<sop>\"]),\n    stop_words=[\"<|user|>\", \"<|observation|>\"],\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"intern\",\n    format_user=StringFormatter(slots=[\"<|User|>:{{content}}\\n<|Bot|>:\"]),\n    format_system=StringFormatter(slots=[\"<|System|>:{{content}}\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"<eoa>\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    stop_words=[\"<eoa>\"],\n    efficient_eos=True,  \n)\n\n\n_register_template(\n    name=\"intern2\",\n    format_user=StringFormatter(slots=[\"<|im_start|>user\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_system=StringFormatter(slots=[\"<|im_start|>system\\n{{content}}<|im_end|>\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"<|im_end|>\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    stop_words=[\"<|im_end|>\"],\n    efficient_eos=True,  \n)\n\n\n_register_template(\n    name=\"llama2\",\n    format_user=StringFormatter(slots=[{\"bos_token\"}, \"[INST] {{content}} [/INST]\"]),\n    format_system=StringFormatter(slots=[\"<<SYS>>\\n{{content}}\\n<</SYS>>\\n\\n\"]),\n)\n\n\n_register_template(\n    name=\"llama2_zh\",\n    format_user=StringFormatter(slots=[{\"bos_token\"}, \"[INST] {{content}} [/INST]\"]),\n    format_system=StringFormatter(slots=[\"<<SYS>>\\n{{content}}\\n<</SYS>>\\n\\n\"]),\n    default_system=\"You are a helpful assistant. 你是一个乐于助人的助手。\",\n)\n\n\n_register_template(\n    name=\"llama3\",\n    format_user=StringFormatter(\n        slots=[\n            (\n                \"<|start_header_id|>user<|end_header_id|>\\n\\n{{content}}<|eot_id|>\"\n                \"<|start_header_id|>assistant<|end_header_id|>\\n\\n\"\n            )\n        ]\n    ),\n    format_system=StringFormatter(slots=[\"<|start_header_id|>system<|end_header_id|>\\n\\n{{content}}<|eot_id|>\"]),\n    format_observation=StringFormatter(\n        slots=[\n            (\n                \"<|start_header_id|>tool<|end_header_id|>\\n\\n{{content}}<|eot_id|>\"\n                \"<|start_header_id|>assistant<|end_header_id|>\\n\\n\"\n            )\n        ]\n    ),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    stop_words=[\"<|eot_id|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"mistral\",\n    format_user=StringFormatter(slots=[\"[INST] {{content}} [/INST]\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"olmo\",\n    format_user=StringFormatter(slots=[\"<|user|>\\n{{content}}<|assistant|>\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"eos_token\"}]),\n)\n\n\n_register_template(\n    name=\"openchat\",\n    format_user=StringFormatter(slots=[\"GPT4 Correct User: {{content}}\", {\"eos_token\"}, \"GPT4 Correct Assistant:\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"openchat-3.6\",\n    format_user=StringFormatter(\n        slots=[\n            (\n                \"<|start_header_id|>GPT4 Correct User<|end_header_id|>\\n\\n{{content}}<|eot_id|>\"\n                \"<|start_header_id|>GPT4 Correct Assistant<|end_header_id|>\\n\\n\"\n            )\n        ]\n    ),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    stop_words=[\"<|eot_id|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"orion\",\n    format_user=StringFormatter(slots=[\"Human: {{content}}\\n\\nAssistant: \", {\"eos_token\"}]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n)\n\n\n_register_template(\n    name=\"phi\",\n    format_user=StringFormatter(slots=[\"<|user|>\\n{{content}}<|end|>\\n<|assistant|>\\n\"]),\n    format_system=StringFormatter(slots=[\"<|system|>\\n{{content}}<|end|>\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    format_prefix=EmptyFormatter(slots=[{\"bos_token\"}]),\n    stop_words=[\"<|end|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"qwen\",\n    format_user=StringFormatter(slots=[\"<|im_start|>user\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_system=StringFormatter(slots=[\"<|im_start|>system\\n{{content}}<|im_end|>\\n\"]),\n    format_observation=StringFormatter(slots=[\"<|im_start|>tool\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    default_system=\"You are a helpful assistant.\",\n    stop_words=[\"<|im_end|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"solar\",\n    format_user=StringFormatter(slots=[\"\n    format_system=StringFormatter(slots=[\"\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"starchat\",\n    format_user=StringFormatter(slots=[\"<|user|>\\n{{content}}<|end|>\\n<|assistant|>\"]),\n    format_system=StringFormatter(slots=[\"<|system|>\\n{{content}}<|end|>\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    stop_words=[\"<|end|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"telechat\",\n    format_user=StringFormatter(slots=[\"<_user>{{content}}<_bot>\"]),\n    format_system=StringFormatter(slots=[\"<_system>{{content}}<_end>\"]),\n    stop_words=[\"<_end>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"vicuna\",\n    format_user=StringFormatter(slots=[\"USER: {{content}} ASSISTANT:\"]),\n    default_system=(\n        \"A chat between a curious user and an artificial intelligence assistant. \"\n        \"The assistant gives helpful, detailed, and polite answers to the user's questions.\"\n    ),\n)\n\n\n_register_template(\n    name=\"xuanyuan\",\n    format_user=StringFormatter(slots=[\"Human: {{content}} Assistant:\"]),\n    default_system=(\n        \"以下是用户和人工智能助手之间的对话。用户以Human开头，人工智能助手以Assistant开头，\"\n        \"会对人类提出的问题给出有帮助、高质量、详细和礼貌的回答，并且总是拒绝参与与不道德、\"\n        \"不安全、有争议、政治敏感等相关的话题、问题和指示。\\n\"\n    ),\n)\n\n\n_register_template(\n    name=\"xverse\",\n    format_user=StringFormatter(slots=[\"Human: {{content}}\\n\\nAssistant: \"]),\n)\n\n\n_register_template(\n    name=\"yayi\",\n    format_user=StringFormatter(slots=[{\"token\": \"<|Human|>\"}, \":\\n{{content}}\\n\\n\", {\"token\": \"<|YaYi|>\"}, \":\"]),\n    format_system=StringFormatter(slots=[{\"token\": \"<|System|>\"}, \":\\n{{content}}\\n\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\\n\"]),\n    default_system=(\n        \"You are a helpful, respectful and honest assistant named YaYi \"\n        \"developed by Beijing Wenge Technology Co.,Ltd. \"\n        \"Always answer as helpfully as possible, while being safe.  \"\n        \"Your answers should not include any harmful, unethical, \"\n        \"racist, sexist, toxic, dangerous, or illegal content. \"\n        \"Please ensure that your responses are socially unbiased and positive in nature.\\n\\n\"\n        \"If a question does not make any sense, or is not factually coherent, \"\n        \"explain why instead of answering something not correct. \"\n        \"If you don't know the answer to a question, please don't share false information.\"\n    ),\n    stop_words=[\"<|End|>\"],\n)\n\n\n_register_template(\n    name=\"yi\",\n    format_user=StringFormatter(slots=[\"<|im_start|>user\\n{{content}}<|im_end|>\\n<|im_start|>assistant\\n\"]),\n    format_system=StringFormatter(slots=[\"<|im_start|>system\\n{{content}}<|im_end|>\\n\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    stop_words=[\"<|im_end|>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"yi_vl\",\n    format_user=StringFormatter(slots=[\"\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    default_system=(\n        \"This is a chat between an inquisitive human and an AI assistant. \"\n        \"Assume the role of the AI assistant. Read all the images carefully, \"\n        \"and respond to the human's questions with informative, helpful, detailed and polite answers. \"\n        \"这是一个好奇的人类和一个人工智能助手之间的对话。假设你扮演这个AI助手的角色。\"\n        \"仔细阅读所有的图像，并对人类的问题做出信息丰富、有帮助、详细的和礼貌的回答。\\n\\n\"\n    ),\n    stop_words=[\"\n    efficient_eos=True,\n)\n\n\n_register_template(\n    name=\"yuan\",\n    format_user=StringFormatter(slots=[\"{{content}}\", {\"token\": \"<sep>\"}]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n    stop_words=[\"<eod>\"],\n    replace_eos=True,\n)\n\n\n_register_template(\n    name=\"zephyr\",\n    format_user=StringFormatter(slots=[\"<|user|>\\n{{content}}\", {\"eos_token\"}, \"<|assistant|>\\n\"]),\n    format_system=StringFormatter(slots=[\"<|system|>\\n{{content}}\", {\"eos_token\"}]),\n    default_system=\"You are Zephyr, a helpful assistant.\",\n)\n\n\n_register_template(\n    name=\"ziya\",\n    format_user=StringFormatter(slots=[\"<human>:{{content}}\\n<bot>:\"]),\n    format_separator=EmptyFormatter(slots=[\"\\n\"]),\n)\n```"
        }
    ],
    "temperature": 0
}