{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nfrom functools import partial\nfrom typing import TYPE_CHECKING, Callable, Literal, Optional, Tuple\n\nfrom .processors.feedback import preprocess_feedback_dataset\nfrom .processors.pairwise import preprocess_pairwise_dataset, print_pairwise_dataset_example\nfrom .processors.pretrain import preprocess_pretrain_dataset\nfrom .processors.supervised import (\n    preprocess_packed_supervised_dataset,\n    preprocess_supervised_dataset,\n    print_supervised_dataset_example,\n)\nfrom .processors.unsupervised import preprocess_unsupervised_dataset, print_unsupervised_dataset_example\n\n\nif TYPE_CHECKING:\n    from transformers import PreTrainedTokenizer, ProcessorMixin, Seq2SeqTrainingArguments\n\n    from ..hparams import DataArguments\n    from .template import Template\n\n\ndef get_preprocess_and_print_func(\n    data_args: \"DataArguments\",\n    training_args: \"Seq2SeqTrainingArguments\",\n    stage: Literal[\"pt\", \"sft\", \"rm\", \"ppo\", \"kto\"],\n    template: \"Template\",\n    tokenizer: \"PreTrainedTokenizer\",\n    processor: Optional[\"ProcessorMixin\"],\n) -> Tuple[Callable, Callable]:\n    if stage == \"pt\":\n        preprocess_func = partial(\n            preprocess_pretrain_dataset,\n            tokenizer=tokenizer,\n            data_args=data_args,\n        )\n        print_function = partial(print_unsupervised_dataset_example, tokenizer=tokenizer)\n    elif stage == \"sft\" and not training_args.predict_with_generate:\n        if data_args.packing:\n            if data_args.neat_packing:\n                from datasets.arrow_writer import OptimizedTypedSequence, TypedSequence\n\n                def __init__(self, data, **kwargs):\n                    return TypedSequence.__init__(\n                        self,\n                        data,\n                        type=kwargs.pop(\"type\", None),\n                        try_type=kwargs.pop(\"try_type\", None),\n                        optimized_int_type=kwargs.pop(\"optimized_int_type\", None),\n                    )\n\n                OptimizedTypedSequence.__init__ = __init__\n            preprocess_func = partial(\n                preprocess_packed_supervised_dataset,\n                template=template,\n                tokenizer=tokenizer,\n                data_args=data_args,\n            )\n        else:\n            preprocess_func = partial(\n                preprocess_supervised_dataset,\n                template=template,\n                tokenizer=tokenizer,\n                processor=processor,\n                data_args=data_args,\n            )\n\n        print_function = partial(print_supervised_dataset_example, tokenizer=tokenizer)\n    elif stage == \"rm\":\n        preprocess_func = partial(\n            preprocess_pairwise_dataset,\n            template=template,\n            tokenizer=tokenizer,\n            processor=processor,\n            data_args=data_args,\n        )\n        print_function = partial(print_pairwise_dataset_example, tokenizer=tokenizer)\n    elif stage == \"kto\":\n        preprocess_func = partial(\n            preprocess_feedback_dataset,\n            template=template,\n            tokenizer=tokenizer,\n            processor=processor,\n            data_args=data_args,\n        )\n        print_function = partial(print_supervised_dataset_example, tokenizer=tokenizer)\n    else:\n        preprocess_func = partial(\n            preprocess_unsupervised_dataset,\n            template=template,\n            tokenizer=tokenizer,\n            processor=processor,\n            data_args=data_args,\n        )\n        print_function = partial(print_unsupervised_dataset_example, tokenizer=tokenizer)\n\n    return preprocess_func, print_function\n```"
        }
    ],
    "temperature": 0
}