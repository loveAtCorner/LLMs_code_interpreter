{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nimport json\nimport re\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass, field\nfrom typing import List, Literal, Optional, Tuple, Union\n\nfrom .data_utils import SLOTS\nfrom .tool_utils import DefaultToolUtils, GLM4ToolUtils\n\n\n@dataclass\nclass Formatter(ABC):\n    slots: SLOTS = field(default_factory=list)\n    tool_format: Optional[Literal[\"default\", \"glm4\"]] = None\n\n    @abstractmethod\n    def apply(self, **kwargs) -> SLOTS: ...\n\n    def extract(self, content: str) -> Union[str, List[Tuple[str, str]]]:\n        raise NotImplementedError\n\n\n@dataclass\nclass EmptyFormatter(Formatter):\n    def __post_init__(self):\n        has_placeholder = False\n        for slot in filter(lambda s: isinstance(s, str), self.slots):\n            if re.search(r\"\\{\\{[a-zA-Z_][a-zA-Z0-9_]*\\}\\}\", slot):\n                has_placeholder = True\n\n        if has_placeholder:\n            raise ValueError(\"Empty formatter should not contain any placeholder.\")\n\n    def apply(self, **kwargs) -> SLOTS:\n        return self.slots\n\n\n@dataclass\nclass StringFormatter(Formatter):\n    def __post_init__(self):\n        has_placeholder = False\n        for slot in filter(lambda s: isinstance(s, str), self.slots):\n            if re.search(r\"\\{\\{[a-zA-Z_][a-zA-Z0-9_]*\\}\\}\", slot):\n                has_placeholder = True\n\n        if not has_placeholder:\n            raise ValueError(\"A placeholder is required in the string formatter.\")\n\n    def apply(self, **kwargs) -> SLOTS:\n        elements = []\n        for slot in self.slots:\n            if isinstance(slot, str):\n                for name, value in kwargs.items():\n                    if not isinstance(value, str):\n                        raise RuntimeError(\"Expected a string, got {}\".format(value))\n\n                    slot = slot.replace(\"{{\" + name + \"}}\", value, 1)\n                elements.append(slot)\n            elif isinstance(slot, (dict, set)):\n                elements.append(slot)\n            else:\n                raise RuntimeError(\"Input must be string, set[str] or dict[str, str], got {}\".format(type(slot)))\n\n        return elements\n\n\n@dataclass\nclass FunctionFormatter(Formatter):\n    def __post_init__(self):\n        if self.tool_format == \"default\":\n            self.slots = DefaultToolUtils.get_function_slots() + self.slots\n        elif self.tool_format == \"glm4\":\n            self.slots = GLM4ToolUtils.get_function_slots() + self.slots\n        else:\n            raise NotImplementedError(\"Tool format {} was not found.\".format(self.tool_format))\n\n    def apply(self, **kwargs) -> SLOTS:\n        content = kwargs.pop(\"content\")\n        functions: List[Tuple[str, str]] = []\n        try:\n            tool_calls = json.loads(content)\n            if not isinstance(tool_calls, list):  \n                tool_calls = [tool_calls]\n\n            for tool_call in tool_calls:\n                functions.append((tool_call[\"name\"], json.dumps(tool_call[\"arguments\"], ensure_ascii=False)))\n\n        except json.JSONDecodeError:\n            functions = []\n\n        elements = []\n        for name, arguments in functions:\n            for slot in self.slots:\n                if isinstance(slot, str):\n                    slot = slot.replace(\"{{name}}\", name).replace(\"{{arguments}}\", arguments)\n                    elements.append(slot)\n                elif isinstance(slot, (dict, set)):\n                    elements.append(slot)\n                else:\n                    raise RuntimeError(\"Input must be string, set[str] or dict[str, str], got {}\".format(type(slot)))\n\n        return elements\n\n\n@dataclass\nclass ToolFormatter(Formatter):\n    def __post_init__(self):\n        if self.tool_format == \"default\":\n            self._tool_formatter = DefaultToolUtils.tool_formatter\n            self._tool_extractor = DefaultToolUtils.tool_extractor\n        elif self.tool_format == \"glm4\":\n            self._tool_formatter = GLM4ToolUtils.tool_formatter\n            self._tool_extractor = GLM4ToolUtils.tool_extractor\n        else:\n            raise NotImplementedError(\"Tool format {} was not found.\".format(self.tool_format))\n\n    def apply(self, **kwargs) -> SLOTS:\n        content = kwargs.pop(\"content\")\n        try:\n            tools = json.loads(content)\n            return [self._tool_formatter(tools) if len(tools) != 0 else \"\"]\n        except json.JSONDecodeError:\n            return [\"\"]\n\n    def extract(self, content: str) -> Union[str, List[Tuple[str, str]]]:\n        return self._tool_extractor(content)\n```"
        }
    ],
    "temperature": 0
}