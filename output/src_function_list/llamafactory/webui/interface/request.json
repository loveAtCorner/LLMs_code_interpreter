{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nimport os\n\nfrom ..extras.packages import is_gradio_available\nfrom .common import save_config\nfrom .components import (\n    create_chat_box,\n    create_eval_tab,\n    create_export_tab,\n    create_infer_tab,\n    create_top,\n    create_train_tab,\n)\nfrom .css import CSS\nfrom .engine import Engine\n\n\nif is_gradio_available():\n    import gradio as gr\n\n\ndef create_ui(demo_mode: bool = False) -> gr.Blocks:\n    engine = Engine(demo_mode=demo_mode, pure_chat=False)\n\n    with gr.Blocks(title=\"LLaMA Board\", css=CSS) as demo:\n        if demo_mode:\n            gr.HTML(\"<h1><center>LLaMA Board: A One-stop Web UI for Getting Started with LLaMA Factory</center></h1>\")\n            gr.HTML(\n                '<h3><center>Visit <a href=\"https://github.com/hiyouga/LLaMA-Factory\" target=\"_blank\">'\n                \"LLaMA Factory</a> for details.</center></h3>\"\n            )\n            gr.DuplicateButton(value=\"Duplicate Space for private use\", elem_classes=\"duplicate-button\")\n\n        engine.manager.add_elems(\"top\", create_top())\n        lang: \"gr.Dropdown\" = engine.manager.get_elem_by_id(\"top.lang\")\n\n        with gr.Tab(\"Train\"):\n            engine.manager.add_elems(\"train\", create_train_tab(engine))\n\n        with gr.Tab(\"Evaluate & Predict\"):\n            engine.manager.add_elems(\"eval\", create_eval_tab(engine))\n\n        with gr.Tab(\"Chat\"):\n            engine.manager.add_elems(\"infer\", create_infer_tab(engine))\n\n        if not demo_mode:\n            with gr.Tab(\"Export\"):\n                engine.manager.add_elems(\"export\", create_export_tab(engine))\n\n        demo.load(engine.resume, outputs=engine.manager.get_elem_list(), concurrency_limit=None)\n        lang.change(engine.change_lang, [lang], engine.manager.get_elem_list(), queue=False)\n        lang.input(save_config, inputs=[lang], queue=False)\n\n    return demo\n\n\ndef create_web_demo() -> gr.Blocks:\n    engine = Engine(pure_chat=True)\n\n    with gr.Blocks(title=\"Web Demo\", css=CSS) as demo:\n        lang = gr.Dropdown(choices=[\"en\", \"zh\"])\n        engine.manager.add_elems(\"top\", dict(lang=lang))\n\n        _, _, chat_elems = create_chat_box(engine, visible=True)\n        engine.manager.add_elems(\"infer\", chat_elems)\n\n        demo.load(engine.resume, outputs=engine.manager.get_elem_list(), concurrency_limit=None)\n        lang.change(engine.change_lang, [lang], engine.manager.get_elem_list(), queue=False)\n        lang.input(save_config, inputs=[lang], queue=False)\n\n    return demo\n\n\ndef run_web_ui() -> None:\n    gradio_share = os.environ.get(\"GRADIO_SHARE\", \"0\").lower() in [\"true\", \"1\"]\n    server_name = os.environ.get(\"GRADIO_SERVER_NAME\", \"0.0.0.0\")\n    create_ui().queue().launch(share=gradio_share, server_name=server_name, inbrowser=True)\n\n\ndef run_web_demo() -> None:\n    gradio_share = os.environ.get(\"GRADIO_SHARE\", \"0\").lower() in [\"true\", \"1\"]\n    server_name = os.environ.get(\"GRADIO_SERVER_NAME\", \"0.0.0.0\")\n    create_web_demo().queue().launch(share=gradio_share, server_name=server_name, inbrowser=True)\n```"
        }
    ],
    "temperature": 0
}