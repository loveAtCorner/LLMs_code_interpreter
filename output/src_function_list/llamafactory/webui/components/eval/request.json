{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nfrom typing import TYPE_CHECKING, Dict\n\nfrom ...extras.packages import is_gradio_available\nfrom ..common import DEFAULT_DATA_DIR, list_datasets\nfrom .data import create_preview_box\n\n\nif is_gradio_available():\n    import gradio as gr\n\n\nif TYPE_CHECKING:\n    from gradio.components import Component\n\n    from ..engine import Engine\n\n\ndef create_eval_tab(engine: \"Engine\") -> Dict[str, \"Component\"]:\n    input_elems = engine.manager.get_base_elems()\n    elem_dict = dict()\n\n    with gr.Row():\n        dataset_dir = gr.Textbox(value=DEFAULT_DATA_DIR, scale=2)\n        dataset = gr.Dropdown(multiselect=True, allow_custom_value=True, scale=4)\n        preview_elems = create_preview_box(dataset_dir, dataset)\n\n    input_elems.update({dataset_dir, dataset})\n    elem_dict.update(dict(dataset_dir=dataset_dir, dataset=dataset, **preview_elems))\n\n    with gr.Row():\n        cutoff_len = gr.Slider(minimum=4, maximum=65536, value=1024, step=1)\n        max_samples = gr.Textbox(value=\"100000\")\n        batch_size = gr.Slider(minimum=1, maximum=1024, value=2, step=1)\n        predict = gr.Checkbox(value=True)\n\n    input_elems.update({cutoff_len, max_samples, batch_size, predict})\n    elem_dict.update(dict(cutoff_len=cutoff_len, max_samples=max_samples, batch_size=batch_size, predict=predict))\n\n    with gr.Row():\n        max_new_tokens = gr.Slider(minimum=8, maximum=4096, value=512, step=1)\n        top_p = gr.Slider(minimum=0.01, maximum=1, value=0.7, step=0.01)\n        temperature = gr.Slider(minimum=0.01, maximum=1.5, value=0.95, step=0.01)\n        output_dir = gr.Textbox()\n\n    input_elems.update({max_new_tokens, top_p, temperature, output_dir})\n    elem_dict.update(dict(max_new_tokens=max_new_tokens, top_p=top_p, temperature=temperature, output_dir=output_dir))\n\n    with gr.Row():\n        cmd_preview_btn = gr.Button()\n        start_btn = gr.Button(variant=\"primary\")\n        stop_btn = gr.Button(variant=\"stop\")\n\n    with gr.Row():\n        resume_btn = gr.Checkbox(visible=False, interactive=False)\n        progress_bar = gr.Slider(visible=False, interactive=False)\n\n    with gr.Row():\n        output_box = gr.Markdown()\n\n    elem_dict.update(\n        dict(\n            cmd_preview_btn=cmd_preview_btn,\n            start_btn=start_btn,\n            stop_btn=stop_btn,\n            resume_btn=resume_btn,\n            progress_bar=progress_bar,\n            output_box=output_box,\n        )\n    )\n    output_elems = [output_box, progress_bar]\n\n    cmd_preview_btn.click(engine.runner.preview_eval, input_elems, output_elems, concurrency_limit=None)\n    start_btn.click(engine.runner.run_eval, input_elems, output_elems)\n    stop_btn.click(engine.runner.set_abort)\n    resume_btn.change(engine.runner.monitor, outputs=output_elems, concurrency_limit=None)\n\n    dataset.focus(list_datasets, [dataset_dir], [dataset], queue=False)\n\n    return elem_dict\n```"
        }
    ],
    "temperature": 0
}