{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nfrom typing import TYPE_CHECKING, Any, Dict\n\nfrom .chatter import WebChatModel\nfrom .common import load_config\nfrom .locales import LOCALES\nfrom .manager import Manager\nfrom .runner import Runner\nfrom .utils import create_ds_config, get_time\n\n\nif TYPE_CHECKING:\n    from gradio.components import Component\n\n\nclass Engine:\n    def __init__(self, demo_mode: bool = False, pure_chat: bool = False) -> None:\n        self.demo_mode = demo_mode\n        self.pure_chat = pure_chat\n        self.manager = Manager()\n        self.runner = Runner(self.manager, demo_mode)\n        self.chatter = WebChatModel(self.manager, demo_mode, lazy_init=(not pure_chat))\n        if not demo_mode:\n            create_ds_config()\n\n    def _update_component(self, input_dict: Dict[str, Dict[str, Any]]) -> Dict[\"Component\", \"Component\"]:\n        r\n        output_dict: Dict[\"Component\", \"Component\"] = {}\n        for elem_id, elem_attr in input_dict.items():\n            elem = self.manager.get_elem_by_id(elem_id)\n            output_dict[elem] = elem.__class__(**elem_attr)\n\n        return output_dict\n\n    def resume(self):\n        user_config = load_config() if not self.demo_mode else {}\n        lang = user_config.get(\"lang\", None) or \"en\"\n\n        init_dict = {\"top.lang\": {\"value\": lang}, \"infer.chat_box\": {\"visible\": self.chatter.loaded}}\n\n        if not self.pure_chat:\n            current_time = get_time()\n            init_dict[\"train.current_time\"] = {\"value\": current_time}\n            init_dict[\"train.output_dir\"] = {\"value\": \"train_{}\".format(current_time)}\n            init_dict[\"train.config_path\"] = {\"value\": \"{}.yaml\".format(current_time)}\n            init_dict[\"eval.output_dir\"] = {\"value\": \"eval_{}\".format(current_time)}\n            init_dict[\"infer.image_box\"] = {\"visible\": False}\n\n            if user_config.get(\"last_model\", None):\n                init_dict[\"top.model_name\"] = {\"value\": user_config[\"last_model\"]}\n\n        yield self._update_component(init_dict)\n\n        if self.runner.running and not self.demo_mode and not self.pure_chat:\n            yield {elem: elem.__class__(value=value) for elem, value in self.runner.running_data.items()}\n            if self.runner.do_train:\n                yield self._update_component({\"train.resume_btn\": {\"value\": True}})\n            else:\n                yield self._update_component({\"eval.resume_btn\": {\"value\": True}})\n\n    def change_lang(self, lang: str):\n        return {\n            elem: elem.__class__(**LOCALES[elem_name][lang])\n            for elem_name, elem in self.manager.get_elem_iter()\n            if elem_name in LOCALES\n        }\n```"
        }
    ],
    "temperature": 0
}