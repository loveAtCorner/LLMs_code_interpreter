{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nimport math\nfrom typing import TYPE_CHECKING, List, Optional\n\nfrom transformers import DataCollatorForLanguageModeling\n\nfrom ...data import get_dataset, split_dataset\nfrom ...extras.ploting import plot_loss\nfrom ...model import load_model, load_tokenizer\nfrom ..trainer_utils import create_modelcard_and_push\nfrom .trainer import CustomTrainer\n\n\nif TYPE_CHECKING:\n    from transformers import Seq2SeqTrainingArguments, TrainerCallback\n\n    from ...hparams import DataArguments, FinetuningArguments, ModelArguments\n\n\ndef run_pt(\n    model_args: \"ModelArguments\",\n    data_args: \"DataArguments\",\n    training_args: \"Seq2SeqTrainingArguments\",\n    finetuning_args: \"FinetuningArguments\",\n    callbacks: Optional[List[\"TrainerCallback\"]] = None,\n):\n    tokenizer_module = load_tokenizer(model_args)\n    tokenizer = tokenizer_module[\"tokenizer\"]\n    dataset = get_dataset(model_args, data_args, training_args, stage=\"pt\", **tokenizer_module)\n    model = load_model(tokenizer, model_args, finetuning_args, training_args.do_train)\n    data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)\n\n    \n    trainer = CustomTrainer(\n        model=model,\n        args=training_args,\n        finetuning_args=finetuning_args,\n        data_collator=data_collator,\n        callbacks=callbacks,\n        **tokenizer_module,\n        **split_dataset(dataset, data_args, training_args),\n    )\n\n    \n    if training_args.do_train:\n        train_result = trainer.train(resume_from_checkpoint=training_args.resume_from_checkpoint)\n        trainer.save_model()\n        trainer.log_metrics(\"train\", train_result.metrics)\n        trainer.save_metrics(\"train\", train_result.metrics)\n        trainer.save_state()\n        if trainer.is_world_process_zero() and finetuning_args.plot_loss:\n            plot_loss(training_args.output_dir, keys=[\"loss\", \"eval_loss\"])\n\n    \n    if training_args.do_eval:\n        metrics = trainer.evaluate(metric_key_prefix=\"eval\")\n        try:\n            perplexity = math.exp(metrics[\"eval_loss\"])\n        except OverflowError:\n            perplexity = float(\"inf\")\n\n        metrics[\"perplexity\"] = perplexity\n        trainer.log_metrics(\"eval\", metrics)\n        trainer.save_metrics(\"eval\", metrics)\n\n    \n    create_modelcard_and_push(trainer, model_args, data_args, training_args, finetuning_args)\n```"
        }
    ],
    "temperature": 0
}