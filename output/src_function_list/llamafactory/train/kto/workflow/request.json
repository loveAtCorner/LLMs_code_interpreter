{
    "model": "qwen1.5-32b-chat-int4",
    "messages": [
        {
            "role": "system",
            "content": "你是python源码结构和逻辑的解析专家，非常擅长剖析核心代码的功能"
        },
        {
            "role": "user",
            "content": "返回下面这个脚本当中所有函数或者类的名称，及其对应的功能\n返回内容的格式需要遵循markdown表格的形式\n\n```python\nfrom typing import TYPE_CHECKING, List, Optional\n\nfrom ...data import KTODataCollatorWithPadding, get_dataset, split_dataset\nfrom ...extras.constants import IGNORE_INDEX\nfrom ...extras.ploting import plot_loss\nfrom ...hparams import ModelArguments\nfrom ...model import load_model, load_tokenizer\nfrom ..trainer_utils import create_modelcard_and_push, create_ref_model\nfrom .trainer import CustomKTOTrainer\n\n\nif TYPE_CHECKING:\n    from transformers import Seq2SeqTrainingArguments, TrainerCallback\n\n    from ...hparams import DataArguments, FinetuningArguments\n\n\ndef run_kto(\n    model_args: \"ModelArguments\",\n    data_args: \"DataArguments\",\n    training_args: \"Seq2SeqTrainingArguments\",\n    finetuning_args: \"FinetuningArguments\",\n    callbacks: Optional[List[\"TrainerCallback\"]] = None,\n):\n    tokenizer_module = load_tokenizer(model_args)\n    tokenizer = tokenizer_module[\"tokenizer\"]\n    dataset = get_dataset(model_args, data_args, training_args, stage=\"kto\", **tokenizer_module)\n    model = load_model(tokenizer, model_args, finetuning_args, training_args.do_train)\n\n    data_collator = KTODataCollatorWithPadding(\n        tokenizer=tokenizer,\n        pad_to_multiple_of=8,\n        label_pad_token_id=IGNORE_INDEX if data_args.ignore_pad_token_for_loss else tokenizer.pad_token_id,\n    )\n\n    \n    if finetuning_args.ref_model is None and (not training_args.do_train):  \n        ref_model = model\n    else:\n        ref_model = create_ref_model(model_args, finetuning_args)\n\n    \n    training_args.remove_unused_columns = False  \n\n    \n    trainer = CustomKTOTrainer(\n        model=model,\n        ref_model=ref_model,\n        args=training_args,\n        finetuning_args=finetuning_args,\n        data_collator=data_collator,\n        callbacks=callbacks,\n        **tokenizer_module,\n        **split_dataset(dataset, data_args, training_args),\n    )\n\n    \n    if training_args.do_train:\n        train_result = trainer.train(resume_from_checkpoint=training_args.resume_from_checkpoint)\n        trainer.save_model()\n        trainer.log_metrics(\"train\", train_result.metrics)\n        trainer.save_metrics(\"train\", train_result.metrics)\n        trainer.save_state()\n        if trainer.is_world_process_zero() and finetuning_args.plot_loss:\n            plot_loss(training_args.output_dir, keys=[\"loss\", \"eval_loss\", \"train/rewards/chosen\"])\n\n    \n    if training_args.do_eval:\n        metrics = trainer.evaluate(metric_key_prefix=\"eval\")\n        if id(model) == id(ref_model):  \n            remove_keys = [key for key in metrics.keys() if \"rewards\" in key]\n            for key in remove_keys:\n                metrics.pop(key)\n        trainer.log_metrics(\"eval\", metrics)\n        trainer.save_metrics(\"eval\", metrics)\n\n    \n    create_modelcard_and_push(trainer, model_args, data_args, training_args, finetuning_args)\n```"
        }
    ],
    "temperature": 0
}